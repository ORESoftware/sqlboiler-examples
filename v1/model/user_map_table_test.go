// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserMapTables(t *testing.T) {
	t.Parallel()

	query := UserMapTables()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserMapTablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserMapTablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserMapTables().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserMapTablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserMapTableSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserMapTablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserMapTableExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserMapTable exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserMapTableExists to return true, but got false.")
	}
}

func testUserMapTablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userMapTableFound, err := FindUserMapTable(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userMapTableFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserMapTablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserMapTables().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserMapTablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserMapTables().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserMapTablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userMapTableOne := &UserMapTable{}
	userMapTableTwo := &UserMapTable{}
	if err = randomize.Struct(seed, userMapTableOne, userMapTableDBTypes, false, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}
	if err = randomize.Struct(seed, userMapTableTwo, userMapTableDBTypes, false, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userMapTableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userMapTableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserMapTables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserMapTablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userMapTableOne := &UserMapTable{}
	userMapTableTwo := &UserMapTable{}
	if err = randomize.Struct(seed, userMapTableOne, userMapTableDBTypes, false, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}
	if err = randomize.Struct(seed, userMapTableTwo, userMapTableDBTypes, false, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userMapTableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userMapTableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userMapTableBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func userMapTableAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func userMapTableAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func userMapTableBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func userMapTableAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func userMapTableBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func userMapTableAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func userMapTableBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func userMapTableAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserMapTable) error {
	*o = UserMapTable{}
	return nil
}

func testUserMapTablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserMapTable{}
	o := &UserMapTable{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userMapTableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserMapTable object: %s", err)
	}

	AddUserMapTableHook(boil.BeforeInsertHook, userMapTableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userMapTableBeforeInsertHooks = []UserMapTableHook{}

	AddUserMapTableHook(boil.AfterInsertHook, userMapTableAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userMapTableAfterInsertHooks = []UserMapTableHook{}

	AddUserMapTableHook(boil.AfterSelectHook, userMapTableAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userMapTableAfterSelectHooks = []UserMapTableHook{}

	AddUserMapTableHook(boil.BeforeUpdateHook, userMapTableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userMapTableBeforeUpdateHooks = []UserMapTableHook{}

	AddUserMapTableHook(boil.AfterUpdateHook, userMapTableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userMapTableAfterUpdateHooks = []UserMapTableHook{}

	AddUserMapTableHook(boil.BeforeDeleteHook, userMapTableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userMapTableBeforeDeleteHooks = []UserMapTableHook{}

	AddUserMapTableHook(boil.AfterDeleteHook, userMapTableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userMapTableAfterDeleteHooks = []UserMapTableHook{}

	AddUserMapTableHook(boil.BeforeUpsertHook, userMapTableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userMapTableBeforeUpsertHooks = []UserMapTableHook{}

	AddUserMapTableHook(boil.AfterUpsertHook, userMapTableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userMapTableAfterUpsertHooks = []UserMapTableHook{}
}

func testUserMapTablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserMapTablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userMapTableColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserMapTableToOneUserTableUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserMapTable
	var foreign UserTable

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userMapTableDBTypes, false, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userTableDBTypes, false, userTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserMapTableSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserMapTable)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserMapTableToOneSetOpUserTableUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserMapTable
	var b, c UserTable

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userMapTableDBTypes, false, strmangle.SetComplement(userMapTablePrimaryKeyColumns, userMapTableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userTableDBTypes, false, strmangle.SetComplement(userTablePrimaryKeyColumns, userTableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userTableDBTypes, false, strmangle.SetComplement(userTablePrimaryKeyColumns, userTableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserTable{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserUserMapTables[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserMapTablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserMapTablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserMapTableSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserMapTablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserMapTables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userMapTableDBTypes = map[string]string{`ID`: `integer`, `UserID`: `integer`, `Key`: `character varying`, `ValueType`: `character varying`, `Value`: `json`}
	_                   = bytes.MinRead
)

func testUserMapTablesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userMapTablePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userMapTableAllColumns) == len(userMapTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserMapTablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userMapTableAllColumns) == len(userMapTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserMapTable{}
	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userMapTableDBTypes, true, userMapTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userMapTableAllColumns, userMapTablePrimaryKeyColumns) {
		fields = userMapTableAllColumns
	} else {
		fields = strmangle.SetComplement(
			userMapTableAllColumns,
			userMapTablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserMapTableSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserMapTablesUpsert(t *testing.T) {
	t.Parallel()

	if len(userMapTableAllColumns) == len(userMapTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserMapTable{}
	if err = randomize.Struct(seed, &o, userMapTableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserMapTable: %s", err)
	}

	count, err := UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userMapTableDBTypes, false, userMapTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserMapTable struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserMapTable: %s", err)
	}

	count, err = UserMapTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
